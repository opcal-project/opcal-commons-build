pipeline {
    agent {
        node {
            label 'linux'
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        booleanParam(name: 'MAVEN_DEBUG', defaultValue: false, description: 'Enable maven debug logs')
    }

    environment {
        MAVEN_CLI_OPTS = "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
        JAVA_HOME = "${JAVA17_HOME}"
        PATH = "${JAVA_HOME}/bin:${PATH}"
    }

    stages {
        stage('Validation') {
            steps {
                script {
                    def manual = false
                    def causes = currentBuild.getBuildCauses()
                    for(cause in causes) {
                        if (cause.shortDescription.toString().contains("Started by user")) {
                            manual = true
                        }
                    }
                    skipCi = sh (script: "git log -1 --pretty=%B | grep '\\[skip ci\\]'", returnStatus: true)
                    echo "${skipCi}"
                    echo "${env.TAG_NAME}"
                    if (manual == false && skipCi == 0 && env.TAG_NAME == null) {
                        echo "Skipping this pipeline by commit message mark!"
                        currentBuild.result = "ABORTED"
                        throw new org.jenkinsci.plugins.workflow.steps.FlowInterruptedException(hudson.model.Result.ABORTED)
                    } else {
                        echo "pipeline build..."
                    }
                }
            }
        }
        stage('Build') {
            steps {
                withCredentials([
                        file(credentialsId: 'GPG_PRI', variable: 'GPG_PRI'),
                        string(credentialsId: 'GPG_PASSPHRASE', variable: 'MAVEN_GPG_PASSPHRASE'),
                        usernamePassword(credentialsId: 'opcal-ossrh', passwordVariable: 'OSSRH_P', usernameVariable: 'OSSRH_U')
                ]) {
                    script {
                        sh "gpg --allow-secret-key-import --batch --import \$GPG_PRI"
                        if (params.MAVEN_DEBUG == true) {
                            env.MAVEN_CLI_DEBUG = " -e -X";
                        } else {
                            env.MAVEN_CLI_DEBUG = "";
                        }
                        if (env.CHANGE_URL == null) {
                            // non-PR build
                            sh "./mvnw -U clean ${env.MAVEN_CLI_OPTS} ${env.MAVEN_CLI_DEBUG} deploy -s settings.xml"
                        } else {
                            // PR build
                            sh "./mvnw -U clean ${env.MAVEN_CLI_OPTS} ${env.MAVEN_CLI_DEBUG} test -Dgpg.skip=true"
                        }
                        sh "./mvnw ossindex:audit"
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        failure {
            withCredentials([
                    string(credentialsId: 'ALERT_MAIL', variable: 'SEND_TO')
            ]) {
                emailext(
                        to: "${SEND_TO}",
                        subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - ${env.currentResult}!",
                        body: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult}. \n\nCheck console output at ${env.BUILD_URL} to view the results."
                )
            }
        }
    }
}