pipeline {
    agent {
        kubernetes {
            cloud 'kubernetes'
            inheritFrom 'github-jdk-17-build'
        }
    }

    environment {
        MAVEN_CLI_OPTS = "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
    }

    stages {
        stage('Validation') {
            steps {
                script {
                    skipCi = sh (script: "git log -1 --pretty=%B | grep '\\[skip ci\\]'", returnStatus: true)
                    if (skipCi != 0 && env.TAG_NAME == null) {
                        echo "pipeline build..."
                    } else {
                        echo "Skipping this pipeline by commit message mark!"
                        currentBuild.result = "ABORTED"
                        throw new org.jenkinsci.plugins.workflow.steps.FlowInterruptedException(hudson.model.Result.ABORTED)
                    }
                }
            }
        }
        stage('Build') {
            steps {
                cache(caches: [
                        arbitraryFileCache(cacheName: '', cacheValidityDecidingFile: '', compressionMethod: 'TARGZ_BEST_SPEED', excludes: '', includes: '**/*', path: '/root/.m2'),
                        arbitraryFileCache(cacheName: '', cacheValidityDecidingFile: '', compressionMethod: 'TARGZ_BEST_SPEED', excludes: '', includes: '**/*', path: '/root/.sonar')
                ],
                        defaultBranch: 'main',
                        maxCacheSize: 0) {
                    container("temurin-jdk-17") {
                        sh 'printenv'
                        withCredentials([
                                file(credentialsId: 'GPG_PRI', variable: 'GPG_PRI'),
                                string(credentialsId: 'GPG_PASSPHRASE', variable: 'GPG_PASSPHRASE'),
                                string(credentialsId: 'MAVEN_DEBUG', variable: 'MAVEN_DEBUG'),
                                usernamePassword(credentialsId: 'opcal-ossrh', passwordVariable: 'OSSRH_P', usernameVariable: 'OSSRH_U')
                        ]) {
                            sh 'cat ${GPG_PRI} > /tmp/signkey.gpg'
                            sh 'gpg --allow-secret-key-import --batch --import /tmp/signkey.gpg'
                            sh '''
                                if [ "${MAVEN_DEBUG}" == "true" ]; then
                                    export MAVEN_CLI_OPTS="${MAVEN_CLI_OPTS} -e -X"
                                fi
                                ./mvnw -U clean $MAVEN_CLI_OPTS deploy -Dgpg.passphrase=${GPG_PASSPHRASE} -s settings.xml
                                ./mvnw ossindex:audit
                            '''
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}